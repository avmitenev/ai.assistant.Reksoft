
## **Tproger: Типичные ошибки джунов, использующих React**


Об основных ошибках junior\-разработчиков, использующих React. На чем сыпятся джуны, и как с этим жить? Перевод статьи [«Mistakes Junior React Developers Make»](https://medium.com/frontend-digest/mistakes-junior-react-developers-make-c546b1af187d) от наших коллег из практики Frontend «Рексофт».


### Прямые манипуляции с DOM


Такого рода ошибка встречается особенно часто среди разработчиков, которые только пересели с jQuery.


Писали ли вы такой код?



```
![](https://sun9-15.userapi.com/fZPHmRTW2pfWNoEPSUjNgGTEWks3ISH2ebKVVQ/PR0qkzUnDKw.jpg)
```

В чем же проблема?


В React мы должны избегать прямых взаимодействий с DOM. Вместо того чтобы получать ссылку на DOM узел и добавлять к нему класс напрямую, следует изменить состояние в самом компоненте, исходя из которого и будет добавлен класс к элементу.


### Что же такого плохого в прямых манипуляциях DOM?


Любое веб\-приложение на самом деле строится на состоянии и его управлении. Есть прямая зависимость между сложностью ПО и состоянием, которое его описывает. Если ваше приложение совмещает состояния DOM и React, то сложность его поддержки вырастет очень быстро.


### Возможное решение



```
![](https://sun9-40.userapi.com/nFj_yBvxuYaV-0ppMtCzQr8ObCnoXtxj9SkLjw/R7Z7khQhSu8.jpg)
```

Обратим внимание на то, как мы используем React состояние для обновления атрибута `className` в нашем компоненте, и, как следствие, мы избавились от `document.querySelector`. Отлично!


### Не следить за ресурсами


Новички в разработке часто пишут такой код, когда работают с событиями. Возьмем, например, простой React компонент, который делает… что\-то, когда пользователь нажмет пробел.



```
![](https://sun9-12.userapi.com/6-ERHm3WkmYRf6mn-Dz2FsukdSCLYEuYwkuwhA/Z7WmBbmytMs.jpg)
```

Заметили, как мы добавили слушатель события, но не позаботились о том, чтобы удалить его в конце?


Это может привести к утечкам памяти и трудноуловимым проблемам в будущем. Лучшим решением считается удаление подписчиков перед тем, как наш компонент будет удален из DOM.


Взглянем на решение ниже:


![](https://sun9-16.userapi.com/f2KCVC-Il-OytJ5GTtCEMgGLce_c6xHNvPKWng/YPsGNhWcHqc.jpg)


### Отказ от тестов (или их недостаточное количество)


Если бы мне давали по рублю за каждый проект, который я просмотрел и где единственным тестом был тот, что является по умолчанию в create\-react\-app, я не писал бы эту статью. А, наверное, потягивал сейчас дайкири где\-нибудь на пляже.


Что же такого в тестировании, что так пугает джунов? Я думаю, причина заключается в нетривиальности тестирования компонентов, особенно при условии их постоянного развития и роста комплексности. Часто вижу, как младшие программисты пишут юнит\-тесты для каких\-то определенных чистых функций, но терпят неудачу в случае, когда нужно написать интеграционный тест для целого компонента.


Может быть, заглушки сбивают их с толку? Или они испытывают сложности с тем, что следует тестировать и что нет?


Давайте взглянем на компонент, который я только что написал. Это очень простая форма входа, где пользователь должен ввести свой логин и пароль. Когда последний подтверждает введенную информацию, мы делаем вызов API и в случае, если ответ положительный, направляем клиента на другую страницу.



```
![](https://sun9-17.userapi.com/8a_pRkO4b_YcyESpcM72wmnNYOL3U-CKYzwfwQ/cUWbvEqiyHQ.jpg)
```

### Так как же протестировать данную форму?


Первым делом давайте взглянем, каким образом наш пользователь будет взаимодействовать с ней.


1. Пользователь вводит свои данные.
2. Пользователь нажимает на кнопку подтверждения.
3. Пользователь перенаправляется на страничку «home».


Это и есть все то, что нам нужно протестировать.


Ниже я написал один из тест\-кейсов для данного компонента. Можете ли вы предложить какие\-нибудь еще сценарии, которые было бы полезно протестировать?



```
![](https://sun9-19.userapi.com/1zyqWoiUauiEr2shwfY_XcVvvx9p7kiwLylruQ/baZHGaPiWlI.jpg)
```

### Непонимание Webpack


Некоторые из младших разработчиков, с которыми я работал, знали, как использовать, но не понимали, как работает Webpack. Они использовали только лишь с основной кодовой базой проекта и считали, что все остальное «работает просто потому что». Они не копали глубже, не выясняли, как именно CSS и ES6, который они пишут, трансформируется и объединяется в то, что в конечном итоге используется клиентским браузером.


Я рекомендую каждому React\-разработчику выделить время и построить простой шаблонный проект. Вместо того, чтобы каждый раз полагаться на create\-react\-app и NextJS, разберитесь, как современные инструменты сборки JavaScript работают вместе. Это улучшит ваше понимание своей работы и, как следствие, сделает вас более эффективным разработчиком, особенно при решении проблем со сборкой.


*Отметим, что мнение наших коллег не во всем совпадает с мнением автора оригинальной статьи.*


Источник: [Tproger](https://tproger.ru/translations/mistakes-junior-react-developers-make/)


Изображение: [Lautaro Andreani/Unsplash.com](https://unsplash.com/photos/a-computer-screen-with-a-logo-on-it-UYsBCu9RP3Y)


[Все новости](/news/ "Новости")[React](https://www.reksoft.ru/blog/tag/react/)**,** [ошибки](https://www.reksoft.ru/blog/tag/ошибки/)**,** [программирование](https://www.reksoft.ru/blog/tag/программирование/)### ЕЩЕ НОВОСТИ


 

[![](https://www.reksoft.ru/wp-content/uploads/2024/10/shutterstock_2463386913-1.jpg)](https://www.reksoft.ru/blog/2024/10/17/trusted-industrial-network-2030/)## [Защищенная промышленная сеть передачи данных появится не раньше 2030 года](https://www.reksoft.ru/blog/2024/10/17/trusted-industrial-network-2030/)

17\.10\.2024[Пресса о нас](https://www.reksoft.ru/blog/2024/10/17/trusted-industrial-network-2030/)[promauto](https://www.reksoft.ru/blog/tag/promauto/)**,** [Рексофт Консалтинг](https://www.reksoft.ru/blog/tag/рексофт-консалтинг/)[Читать далее](https://www.reksoft.ru/blog/2024/10/17/trusted-industrial-network-2030/) 



[![](https://www.reksoft.ru/wp-content/uploads/2024/05/photo_2024-05-29_16-59-32.jpg)](https://www.reksoft.ru/blog/2024/10/11/alarm-management-implementation/)## [Внедрение Alarm Management на этапе строительства предприятия: где подстелить соломку](https://www.reksoft.ru/blog/2024/10/11/alarm-management-implementation/)

11\.10\.2024[Пресса о нас](https://www.reksoft.ru/blog/2024/10/11/alarm-management-implementation/)[promauto](https://www.reksoft.ru/blog/tag/promauto/)[Читать далее](https://www.reksoft.ru/blog/2024/10/11/alarm-management-implementation/) 



[![](https://www.reksoft.ru/wp-content/uploads/2022/08/R_Danilina_966x724.jpg)](https://www.reksoft.ru/blog/2024/10/10/reksoft-group-marketing-interview/)## [Галина Данилина, Рексофт: «Бизнес ожидает от маркетинга активного участия в исследовании рынка и поиске новых ниш»](https://www.reksoft.ru/blog/2024/10/10/reksoft-group-marketing-interview/)

10\.10\.2024[Пресса о нас](https://www.reksoft.ru/blog/2024/10/10/reksoft-group-marketing-interview/)[интервью](https://www.reksoft.ru/blog/tag/интервью/)[Читать далее](https://www.reksoft.ru/blog/2024/10/10/reksoft-group-marketing-interview/) 

 


 

